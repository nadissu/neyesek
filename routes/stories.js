const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const axios = require('axios');

const STORIES_FILE = path.join(__dirname, '..', 'data', 'stories.json');

// Masallar verisini oku
function readStories() {
  const data = fs.readFileSync(STORIES_FILE, 'utf8');
  return JSON.parse(data);
}

// Masallar verisini yaz
function writeStories(data) {
  fs.writeFileSync(STORIES_FILE, JSON.stringify(data, null, 2), 'utf8');
}

// T√ºm masallarƒ± getir
router.get('/', (req, res) => {
  try {
    const data = readStories();
    res.json(data);
  } catch (error) {
    res.status(500).json({ error: 'Masallar y√ºklenirken hata olu≈ütu' });
  }
});

// Belirli bir masalƒ± ID'ye g√∂re getir
router.get('/:id', (req, res) => {
  try {
    const data = readStories();
    const story = data.stories.find(s => s.id === parseInt(req.params.id));
    
    if (story) {
      res.json(story);
    } else {
      res.status(404).json({ error: 'Masal bulunamadƒ±' });
    }
  } catch (error) {
    res.status(500).json({ error: 'Masal detaylarƒ± alƒ±namadƒ±' });
  }
});

// Belirli bir masalƒ±n g√∂r√ºnt√ºlenme sayƒ±sƒ±nƒ± artƒ±r
router.post('/:id/view', (req, res) => {
  try {
    const data = readStories();
    const story = data.stories.find(s => s.id === parseInt(req.params.id));
    
    if (story) {
      story.views++;
      writeStories(data);
      res.json({ success: true, views: story.views });
    } else {
      res.status(404).json({ error: 'Masal bulunamadƒ±' });
    }
  } catch (error) {
    res.status(500).json({ error: 'G√∂r√ºnt√ºlenme sayƒ±sƒ± g√ºncellenirken hata olu≈ütu' });
  }
});

// AI ile masal ara ve olu≈ütur
router.post('/search-ai', async (req, res) => {
  try {
    const { query, ageGroup } = req.body;

    if (!query) {
      return res.status(400).json({ 
        success: false, 
        message: 'L√ºtfen bir konu girin' 
      });
    }

    // Groq API isteƒüi
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'llama-3.3-70b-versatile',
        messages: [
          {
            role: 'system',
            content: 'Sen √ßocuklar i√ßin eƒüitici ve eƒülenceli masallar yazan bir AI asistanƒ±sƒ±n. Sadece JSON formatƒ±nda cevap ver, ba≈üka hi√ßbir ≈üey yazma. JSON yapƒ±sƒ± ≈ü√∂yle olmalƒ±: {"title": "...", "category": "...", "ageGroup": "...", "icon": "...", "summary": "...", "characters": ["..."], "content": ["..."], "moral": "..."}. Content alanƒ± en az 8 paragraf olmalƒ±. Characters dizisinde 3-5 karakter olmalƒ±. Masal √ßocuklar i√ßin uygun, eƒüitici ve eƒülenceli olmalƒ±.'
          },
          {
            role: 'user',
            content: 'Konu: ' + query + ' | Ya≈ü grubu: ' + ageGroup + ' | L√ºtfen bu konu ve ya≈ü grubuna uygun detaylƒ± bir masal olu≈ütur. Category deƒüeri ≈üunlardan biri olmalƒ±: "Klasik Masallar", "T√ºrk Masallarƒ±", "Fabl Masallar", "Doƒüu Masallarƒ±" veya "Modern Masallar". Icon i√ßin uygun bir emoji se√ß. Summary kƒ±sa olsun (2-3 c√ºmle). Content en az 8 paragraf olmalƒ± ve akƒ±cƒ± bir hikaye anlatmalƒ±.'
          }
        ],
        temperature: 0.7,
        max_tokens: 3500,
        response_format: { type: "json_object" }
      },
      {
        headers: {
          'Authorization': 'Bearer ' + process.env.GROQ_API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );

    let storyData = response.data.choices[0].message.content;
    
    // JSON temizleme
    storyData = storyData.trim();
    if (storyData.startsWith('```json')) {
      storyData = storyData.replace(/```json\n?/g, '').replace(/```\n?$/g, '');
    }
    if (storyData.startsWith('```')) {
      storyData = storyData.replace(/```\n?/g, '');
    }
    
    const jsonMatch = storyData.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      storyData = jsonMatch[0];
    }

    const story = JSON.parse(storyData);

    // Masalƒ± kaydet
    const storiesData = readStories();
    
    // Aynƒ± masal var mƒ± kontrol et
    const existingStory = storiesData.stories.find(
      s => s.title.toLowerCase().trim() === story.title.toLowerCase().trim()
    );

    let message = '';
    
    if (!existingStory) {
      // Yeni masal ekle
      const newStory = {
        id: storiesData.stories.length + 1,
        ...story,
        views: 0,
        isAI: true
      };
      
      storiesData.stories.push(newStory);
      writeStories(storiesData);
      message = 'Masal ba≈üarƒ±yla kaydedildi! ‚ú®';
    } else {
      message = 'Bu masal zaten mevcut.';
    }

    res.json({
      success: true,
      story: story,
      message: message
    });

  } catch (error) {
    console.error('AI masal olu≈üturma hatasƒ±:', error.response?.data || error.message);
    
    // Fallback: Basit bir √∂rnek masal d√∂nd√ºr
    res.json({
      success: true,
      story: {
        title: query + ' Masalƒ±',
        category: 'Modern Masallar',
        ageGroup: ageGroup,
        icon: 'üìñ',
        summary: 'Bu masal ' + query + ' hakkƒ±nda g√ºzel bir hikaye anlatƒ±r.',
        characters: ['Ana Karakter', 'Yardƒ±mcƒ± Karakter', 'Bilge ƒ∞htiyar'],
        content: [
          'Bir zamanlar, uzak diyarlarda g√ºzel bir √ºlke varmƒ±≈ü.',
          'Bu √ºlkede ya≈üayan insanlar √ßok mutlu ve huzurluymu≈ü.',
          'Bir g√ºn, gen√ß bir kahramanƒ±mƒ±z ortaya √ßƒ±kmƒ±≈ü.',
          'Kar≈üƒ±sƒ±na √ßƒ±kan zorluklarƒ± cesaretle a≈ümƒ±≈ü.',
          'Yolculuƒüu boyunca pek √ßok ≈üey √∂ƒürenmi≈ü.',
          'Dostlarƒ±yla birlikte engelleri a≈ümƒ±≈ü.',
          'Sonunda amacƒ±na ula≈ümayƒ± ba≈üarmƒ±≈ü.',
          'Ve sonsuza kadar mutlu ya≈üamƒ±≈ülar.'
        ],
        moral: 'Bu hikaye bize cesaretin, dostluƒüun ve azmin √∂nemini √∂ƒüretir.'
      },
      message: 'AI ge√ßici olarak kullanƒ±lamƒ±yor. √ñrnek bir masal g√∂steriliyor.'
    });
  }
});

// En √ßok okunan masallar
router.get('/popular', (req, res) => {
  try {
    const data = readStories();
    const popular = data.stories
      .sort((a, b) => b.views - a.views)
      .slice(0, 6);
    res.json(popular);
  } catch (error) {
    res.status(500).json({ error: 'Pop√ºler masallar y√ºklenirken hata olu≈ütu' });
  }
});

// Kategoriye g√∂re masallar
router.get('/category/:category', (req, res) => {
  try {
    const data = readStories();
    const filtered = data.stories.filter(s => s.category === req.params.category);
    res.json(filtered);
  } catch (error) {
    res.status(500).json({ error: 'Masallar y√ºklenirken hata olu≈ütu' });
  }
});

module.exports = router;

